{"version":3,"sources":["components/InputBoxes.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["InputBoxes","props","x","React","useRef","y","w","h","useEffect","current","value","data","style","margin","className","type","ref","onChange","get_coordinates","ImageComponent","lazy","Home","useState","coordinates","setCoordinates","Card","backgroundColor","borderColor","color","Row","Col","xs","fallback","get_coordinates_from_image","xRef","yRef","wRef","hRef","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c8f6c5c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst InputBoxes = (props) =>{\r\n\r\n    const x = React.useRef(0)\r\n    const y = React.useRef(0)\r\n    const w = React.useRef(0)\r\n    const h = React.useRef(0)\r\n    /*\r\n    * Tracks down coordinates change from the image component\r\n    */\r\n    React.useEffect(()=>{\r\n       x.current.value = props.data.x;\r\n       y.current.value = props.data.y;\r\n       w.current.value = props.data.w;\r\n       h.current.value = props.data.h;\r\n    },[props.data])\r\n\r\n    return(\r\n        <div style={{margin:'16%'}}>\r\n           \r\n            <div className=\"form-group\">\r\n                <div className=\"input-group mb-2\">\r\n                <div className=\"input-group-prepend\">\r\n                <div className=\"input-group-text\">X :</div>\r\n                </div>\r\n                <input type=\"text\" ref={x} onChange={()=>{props.get_coordinates(x,y,w,h)}}></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"input-group mb-2\">\r\n                <div className=\"input-group-prepend\">\r\n                <div className=\"input-group-text\">Y :</div>\r\n                </div>\r\n                <input type=\"text\" ref={y} onChange={()=>{props.get_coordinates(x,y,w,h)}}></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"input-group mb-2\">\r\n                <div className=\"input-group-prepend\">\r\n                <div className=\"input-group-text\">Width :</div>\r\n                </div>\r\n                <input type=\"text\" ref={w} onChange={()=>{props.get_coordinates(x,y,w,h)}}></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <div className=\"input-group mb-2\">\r\n                <div className=\"input-group-prepend\">\r\n                <div className=\"input-group-text\">Height :</div>\r\n                </div>\r\n                <input type=\"text\" ref={h} onChange={()=>{props.get_coordinates(x,y,w,h)}}></input>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputBoxes;","import React,{Suspense} from \"react\"\r\nimport {\r\n    Card,Row,Col\r\n  } from 'reactstrap';\r\nimport InputBoxes from \"./InputBoxes\";\r\n//import ImageComponent from \"./ImageComponent\";\r\nconst ImageComponent = React.lazy(()=>import(\"./ImageComponent\"))\r\n \r\n\r\nconst Home = () =>{\r\n    const [coordinates,setCoordinates] = React.useState({x:0,y:0,w:0,h:0})\r\n    const get_coordinates = (xRef,yRef,wRef,hRef) =>{\r\n        let x = xRef.current.value || 0;\r\n        let y = yRef.current.value || 0;\r\n        let w = wRef.current.value || 0;\r\n        let h = hRef.current.value || 0;\r\n        if(x !=0 || y!=0 || w != 0 || h !=0 )\r\n        setCoordinates({x:x,y:y,w:w,h:h})\r\n        \r\n    }\r\n    const get_coordinates_from_image = (x,y,w,h) =>{\r\n        setCoordinates({x:x,y:y,w:w,h:h})\r\n    }\r\n    return ( \r\n        <div>\r\n        <h2>Drag and draw bounding box</h2>\r\n        <Card  style={{ backgroundColor: '#333', borderColor: '#333',color:'#FFF',margin:'0px 1%' }}>\r\n        <Row>\r\n        <Col xs=\"8\" >\r\n        <Suspense fallback={<div><p>Loading....</p></div>}> <ImageComponent data={coordinates} get_coordinates_from_image={get_coordinates_from_image}/></Suspense>\r\n        </Col>\r\n        <Col xs=\"4\" >\r\n            <InputBoxes  get_coordinates={get_coordinates} data={coordinates}/> \r\n        </Col>\r\n        </Row>\r\n \r\n            \r\n        </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport './App.css';\nimport Home from \"./components/Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}