{"version":3,"sources":["components/ImageComponent.js"],"names":["ImageComponent","data","get_coordinates_from_image","canvasRef","React","useRef","imageRef","canvasx","canvasy","last_mousex","last_mousey","mousex","mousey","mousedown","useEffect","current","width","offsetParent","offsetWidth","height","window","outerHeight","x","y","w","h","setTimeout","drawImage","ctx","getContext","beginPath","rect","stroke","document","getElementById","getBoundingClientRect","left","top","onmouseup","e","onmousedown","parseInt","clientX","clientY","console","log","onmousemove","ref","id","src","alt","style","display"],"mappings":"6HAAA,2BAiFeA,UA/EQ,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,KAAKC,EAA8B,EAA9BA,2BACpBC,EAAYC,IAAMC,SAClBC,EAAWF,IAAMC,SACnBE,EAAU,EACVC,EAAU,EACVC,EAAc,EACdC,EAAc,EACdC,EAAS,EACTC,EAAS,EACTC,GAAY,EAKhBT,IAAMU,WAAU,WACZX,EAAUY,QAAQC,MAAQb,EAAUY,QAAQE,aAAaC,YACzDf,EAAUY,QAAQI,OAASC,OAAOC,YAAY,IAChC,IAAXpB,EAAKqB,GAAsB,IAAXrB,EAAKsB,GAAsB,IAAXtB,EAAKuB,GAAsB,IAAXvB,EAAKwB,EAErDC,YAAW,WACRC,EAAU1B,KACX,KAGH0B,EAAU1B,KAGd,CAACA,IAEH,IAAM0B,EAAY,SAAC1B,GACf,IAAI2B,EAAMzB,EAAUY,QAAQc,WAAW,MACvCD,EAAID,UAAUrB,EAASS,QAAS,EAAG,EAAEZ,EAAUY,QAAQC,MAAMb,EAAUY,QAAQI,QAC/ES,EAAIE,YACJF,EAAIG,KAAK9B,EAAKqB,EAAErB,EAAKsB,EAAEtB,EAAKuB,EAAEvB,EAAKwB,GACnCG,EAAII,UAmCR,OA5BA5B,IAAMU,WAAU,WACXP,EAAU0B,SAASC,eAAe,YAAYC,wBAAwBC,KACtE5B,EAAUyB,SAASC,eAAe,YAAYC,wBAAwBE,IACtElC,EAAUY,QAAQuB,UAAY,SAACC,GAC5B1B,GAAY,GAEhBV,EAAUY,QAAQyB,YAAc,SAACD,GAC9B9B,EAAcgC,SAASF,EAAEG,QAAQnC,GACjCG,EAAc+B,SAASF,EAAEI,QAAQnC,GACjCK,GAAY,EACZ+B,QAAQC,IAAI,SAEf1C,EAAUY,QAAQ+B,YAAc,SAACP,IAC7B5B,EAAS8B,SAASF,EAAEG,QAAQnC,GAC5BK,EAAS6B,SAASF,EAAEI,QAAQnC,GACzBK,IAIDX,EAA2BO,EAAYC,EAHzBC,EAAOF,EACNG,EAAOF,MAO9B,IAKE,6BACA,4BAAQqC,IAAK5C,EAAY6C,GAAG,YAA5B,uDAGA,yBAAKD,IAAKzC,EAAU2C,IAAI,kBAAkBC,IAAI,iBAAiBC,MAAO,CAACC,QAAQ","file":"static/js/3.4af90d25.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst ImageComponent = ({data,get_coordinates_from_image})=>{\r\n    const canvasRef = React.useRef();\r\n    const imageRef = React.useRef();\r\n    let canvasx = 0;\r\n    let canvasy = 0;\r\n    let last_mousex = 0;\r\n    let last_mousey = 0\r\n    let mousex = 0;\r\n    let mousey = 0;\r\n    let mousedown = false;\r\n\r\n    /**\r\n     * Draws a bounding box when a change in coordinate is detected\r\n     */\r\n    React.useEffect(()=>{\r\n        canvasRef.current.width = canvasRef.current.offsetParent.offsetWidth;\r\n        canvasRef.current.height = window.outerHeight-100;\r\n        if(data.x === 0 && data.y === 0 && data.w === 0 && data.h === 0)\r\n        {\r\n           setTimeout(()=>{\r\n              drawImage(data)\r\n           },1000)\r\n        }\r\n        else\r\n          drawImage(data)\r\n       \r\n      \r\n    },[data])\r\n\r\n    const drawImage = (data) =>{\r\n        let ctx = canvasRef.current.getContext(\"2d\");\r\n        ctx.drawImage(imageRef.current, 0, 0,canvasRef.current.width,canvasRef.current.height);\r\n        ctx.beginPath();\r\n        ctx.rect(data.x,data.y,data.w,data.h);\r\n        ctx.stroke();\r\n    }\r\n    \r\n    /**\r\n     * Sets of event listeners for drawing the bounding box when a mouse drags \r\n     */\r\n\r\n    React.useEffect(()=>{\r\n         canvasx = document.getElementById(\"myCanvas\").getBoundingClientRect().left;\r\n         canvasy = document.getElementById(\"myCanvas\").getBoundingClientRect().top;\r\n         canvasRef.current.onmouseup = (e) =>{\r\n            mousedown = false;\r\n        }\r\n        canvasRef.current.onmousedown = (e) =>{\r\n           last_mousex = parseInt(e.clientX-canvasx);\r\n           last_mousey = parseInt(e.clientY-canvasy);\r\n           mousedown = true;\r\n           console.log(\"here\")\r\n        }\r\n        canvasRef.current.onmousemove = (e) =>{\r\n            mousex = parseInt(e.clientX-canvasx);\r\n            mousey = parseInt(e.clientY-canvasy);\r\n            if(mousedown) {\r\n                var width = mousex-last_mousex;\r\n                var height = mousey-last_mousey;\r\n              \r\n              get_coordinates_from_image(last_mousex,last_mousey,width,height)\r\n             \r\n     \r\n            }\r\n         }\r\n    },[])\r\n\r\n \r\n\r\n    return(\r\n        <div>\r\n        <canvas ref={canvasRef}  id=\"myCanvas\"   >\r\n                    Your browser does not support the HTML5 canvas tag.\r\n        </canvas>\r\n        <img ref={imageRef} src=\"/images/img.jpg\" alt=\"Card image cap\" style={{display:'none'}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageComponent"],"sourceRoot":""}